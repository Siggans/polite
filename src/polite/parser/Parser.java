/* Generated By:JavaCC: Do not edit this line. Parser.java */
package polite.parser;

import polite.abstractLanguage.AbstractSyntaxTree;
import polite.abstractLanguage.Node;
import polite.abstractLanguage.Operation;
import polite.abstractLanguage.SymbolTable;
import polite.interpreter.basicTypes.BaseType;
import static polite.abstractLanguage.Node.*;

import java.util.Stack;

public class Parser implements ParserConstants {

    public class Pair{
        public Pair(Token t, Operation o){
            tok=t;
            op=o;
        }
        public final Token tok;
        public final Operation op;
    }

    public int setTabSize(int tabSize){
        int oldSize=jj_input_stream.getTabSize(0);
        jj_input_stream.setTabSize(tabSize);
        return oldSize;
    }


    final private static boolean compareForValidNextLevel(
            final String previous, final String current) {
        if (previous.equals(current))
            return false;
        int s1, s2; // space and tab count for string 1, 2
        s1 = s2 = 0;
        for (int i = 0; i != previous.length(); i++) {
            // let's assume tab count as 4 spaces
            if (previous.charAt(i) == ' ')
                s1++;
            else
                s1 += 4;
        }
        for (int i = 0; i != current.length(); i++) {
            // let's assume tab count as 4 spaces
            if (current.charAt(i) == ' ')
                s2++;
            else
                s2 += 4;
        }
        return s2 > s1;
    }

    private Stack<String> levelStack;
    private final String STACK_MARKER = "@";
    private SymbolTable st;

    public AbstractSyntaxTree start() {
        AbstractSyntaxTree ast = new AbstractSyntaxTree();
        levelStack = new Stack<String>();
        setTabSize(4);
        try {
            Module module = ast.getMainModule();
            st=module.initializeSymbolTable(null);
            this.Module(module);
            if (levelStack.empty() || !levelStack.pop().equals(STACK_MARKER)) {
                throw new ParseException("Failure to balance block structure");
            }
        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }
        return ast;
    }

    private boolean checkIndent() throws ParseException {
        return checkIndent(false);
    }

    private boolean checkIndent(final boolean isFirstIndent) throws ParseException{
        String currentIndent=getIndent(isFirstIndent);
        if(levelStack.peek().equals(currentIndent))
            return true;
        else if (levelStack.contains(currentIndent))
            return false;
        int i=2;
        if(isFirstIndent){
            if(getToken(1).kind!=EOL)
                i=1;
        }
        if(getToken(i).kind==EOL)
            return true;
        throw getIndentationException(getToken(i));
    }

    private void toPreviousIndent() throws ParseException {
        if(compareForValidNextLevel(levelStack.peek(),getIndent(false))
                || levelStack.pop().equals(STACK_MARKER)){
            throw getIndentationException(getToken(2));
        }
    }

    private ParseException getIndentationException(Token tok) {
        return new ParseException(String.format("Line %d, %d: '%s' ",
                tok.beginLine,tok.beginColumn,tok.image)
                +"bad indentataion or not a statement");
    }

    private void startNewIndent() throws ParseException {
        if (levelStack.empty()) {
            levelStack.push(STACK_MARKER);
            levelStack.push("");
            if (!checkIndent(true)) { // token can be 0 or 1, check kind
                if (getToken(0).kind == EOL) {
                    throw getIndentationException(getToken(1));
                }
                throw getIndentationException(getToken(0));

            }
        } else { // now valid token is on token 2
            String currentIndent = getIndent(false);
            if (!compareForValidNextLevel(levelStack.peek(), currentIndent)) {
                throw getIndentationException(getToken(2));
            }
            levelStack.push(currentIndent);
        }

    }

    /*
     * this function should be placed before the NewLines()
     * SameBlockStatements() which should be checked using LOOKAHEAD(2) (* let
     * javacc handle most of error checking)
     */
    private String getIndent(final boolean isFirstIndent) {
        Token desiredT, specialT;
        if (isFirstIndent) { // first line of code!!
            // NewLines may or may not have been called!
            desiredT = getToken(1);
            if (desiredT.kind == EOL) {
                desiredT = getToken(2);
            }
        } else {
            // Javacc alread check token for us (by using LOOKAHEAD(2))
            desiredT = getToken(2);
        }
        specialT = desiredT.specialToken;
        if (specialT == null) {
            return "";
        }
        return specialT.image;
    }

    private Node getMember(Token t, Operation op, Node obj, Node id){
        Node str= new Literal(id.getToken(),BaseType.STRING);
        return new Call(t,op,obj,str);
    }
    private static ParseException getScopeError(Token t, String msg){
        return SymbolTable.getScopeError(t,msg);
    }

  final public void NewLines() throws ParseException {
    jj_consume_token(EOL);
  }

  final public void Module(Module module) throws ParseException {
                        startNewIndent();
    if (jj_2_1(2)) {
      NewLines();
    } else {
      ;
    }
    SameBlockStatements(module);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      NewLines();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
                        toPreviousIndent();
  }

  final public void SameBlockStatements(BlockNode bn) throws ParseException {
    LineContent(bn);
    label_1:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_1;
      }
                  if(!checkIndent()) {if (true) return;}
      NewLines();
      LineContent(bn);
    }
  }

  final public void LineContent(BlockNode bn) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPRAN_OP:
    case PASS:
    case PRINT:
    case RETURN:
    case GLOBAL:
    case BLOCKQUOTE:
    case IDENTIFIER:
      StatementLine(bn);
      break;
    case DEF:
    case IF:
    case WHILE:
      StartNewBlockStatement(bn);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void StatementLine(BlockNode bn) throws ParseException {
    Statement(bn);
    if (jj_2_3(2)) {
      jj_consume_token(SEMICOLON);
      StatementLine(bn);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    }
  }

  final public void Statement(BlockNode bn) throws ParseException {
                                Token t,t2=null; Node n=null; NodeList nl=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PASS:
      jj_consume_token(PASS);
                          {if (true) return;}
      break;
    case BLOCKQUOTE:
      jj_consume_token(BLOCKQUOTE);
                              {if (true) return;}
      break;
    case RETURN:
      t = jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPRAN_OP:
      case LBRAK_OP:
      case MINUS_OP:
      case NOT:
      case None:
      case True:
      case False:
      case INTEGER:
      case FLOAT:
      case STRING:
      case BLOCKQUOTE:
      case IDENTIFIER:
        n = Expression();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
                        n = new Return(t, n);
      break;
    case PRINT:
      t = jj_consume_token(PRINT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPRAN_OP:
      case LBRAK_OP:
      case MINUS_OP:
      case AT_OP:
      case NOT:
      case None:
      case True:
      case False:
      case INTEGER:
      case FLOAT:
      case STRING:
      case BLOCKQUOTE:
      case IDENTIFIER:
        nl = ValueList(null);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA_OP:
          t2 = jj_consume_token(COMMA_OP);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
                        n = new Print(t,nl,t2);
      break;
    case GLOBAL:
      t = jj_consume_token(GLOBAL);
      nl = IDList(null);
                        n = new Global(t, nl);
                        st.addGlobal(((Global)n).getList());
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_4(2)) {
        n = Identifier(true,false);
        n = MethodCallOrMemberAssignment(n);
      } else if (jj_2_5(2)) {
        n = Identifier(true,true);
        n = Assignment(n,null);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPRAN_OP:
        case IDENTIFIER:
          n = FunctionCall();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT_OP:
            n = MethodCallOrMemberAssignment(n);
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          bn.addStatement(n);
  }

  final public void StartNewBlockStatement(BlockNode bn) throws ParseException {
                                             Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEF:
      n = FunctionDef();
      break;
    case IF:
      n = IfElse();
      break;
    case WHILE:
      n = While();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            bn.addStatement(n);
  }

  final public IfElse IfElse() throws ParseException {
                  IfElse head, current, newie; Node cond; Token t;
    t = jj_consume_token(IF);
    cond = Expression();
    jj_consume_token(COLON_OP);
          head= new IfElse(t,cond); current=head;
    NextBlockContent(current.getIfBlockHelper());
    label_2:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_2;
      }
                               if(!checkIndent()) {if (true) return head;}
      NewLines();
      t = jj_consume_token(ELIF);
      cond = Expression();
      jj_consume_token(COLON_OP);
                        newie = new IfElse(t,cond);
                        current.getElseBlockHelper().addStatement(newie);
                        current=newie;
      NextBlockContent(current.getIfBlockHelper());
    }
    if (jj_2_7(2)) {
                               if(!checkIndent()) {if (true) return head;}
      NewLines();
      jj_consume_token(ELSE);
      jj_consume_token(COLON_OP);
      NextBlockContent(current.getElseBlockHelper());
    } else {
      ;
    }
                {if (true) return head;}
    throw new Error("Missing return statement in function");
  }

  final public void NextBlockContent(BlockNode bn) throws ParseException {
    if (jj_2_8(2)) {
      Block(bn);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPRAN_OP:
      case PASS:
      case PRINT:
      case RETURN:
      case GLOBAL:
      case BLOCKQUOTE:
      case IDENTIFIER:
        StatementLine(bn);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Block(BlockNode bn) throws ParseException {
                  startNewIndent();
    NewLines();
    SameBlockStatements(bn);
                  toPreviousIndent();
  }

  final public While While() throws ParseException {
                Token t; Node cond; While w;
    t = jj_consume_token(WHILE);
    cond = Expression();
    jj_consume_token(COLON_OP);
          w = new While(t,cond);
    NextBlockContent(w);
          {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

  final public FunDef FunctionDef() throws ParseException {
                       Token t; Node id; NodeList param=null; FunDef fd; final SymbolTable oldst=st;
    t = jj_consume_token(DEF);
    id = Identifier(true,true);
    jj_consume_token(LPRAN_OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      param = IDList(null);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RPRAN_OP);
    jj_consume_token(COLON_OP);
                fd = new FunDef(t,id.getToken().image,param, oldst);
                st= fd.getSymbolTable();
    NextBlockContent(fd);
          st=oldst; {if (true) return fd;}
    throw new Error("Missing return statement in function");
  }

  final public Node Assignment(Node id, Node id2) throws ParseException {
                                    Token t; Node expr;
    t = jj_consume_token(ASSIGN_OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPRAN_OP:
    case LBRAK_OP:
    case MINUS_OP:
    case NOT:
    case None:
    case True:
    case False:
    case INTEGER:
    case FLOAT:
    case STRING:
    case BLOCKQUOTE:
    case IDENTIFIER:
      expr = Expression();
      break;
    case AT_OP:
      expr = LambdaDef();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(id2==null && id instanceof Identifier){
                        {if (true) return new Assign(t,id.getToken().image,expr);}
                }
                {if (true) return Call.setAttr(t,id,(Identifier)id2,expr);}
    throw new Error("Missing return statement in function");
  }

  final public Node LambdaDef() throws ParseException {
                    FunDef f; NodeList nl; Node expr; Token t;final SymbolTable oldst=st;
    t = jj_consume_token(AT_OP);
    nl = IDList(null);
    jj_consume_token(COLON_OP);
                f= new FunDef(t,nl,oldst);
                st= f.getSymbolTable();
    expr = Expression();
                f.addStatement(new Return(t,expr));
                st=oldst;
                {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Node FunctionCall() throws ParseException {
                      Node node; NodeList nl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPRAN_OP:
      jj_consume_token(LPRAN_OP);
      node = LambdaDef();
      jj_consume_token(RPRAN_OP);
      jj_consume_token(LPRAN_OP);
      nl = ValueList(null);
      jj_consume_token(RPRAN_OP);
                  node = new Call(node,nl);
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_9(2)) {
        node = Identifier(true,false);
        nl = ParamList();
                  node = new Call(node,nl);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPRAN_OP:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_3;
          }
          nl = ParamList();
                                         node = new Call(node,nl);
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return node ;}
    throw new Error("Missing return statement in function");
  }

  final public NodeList ParamList() throws ParseException {
                       NodeList nl=null;
    jj_consume_token(LPRAN_OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPRAN_OP:
    case LBRAK_OP:
    case MINUS_OP:
    case AT_OP:
    case NOT:
    case None:
    case True:
    case False:
    case INTEGER:
    case FLOAT:
    case STRING:
    case BLOCKQUOTE:
    case IDENTIFIER:
      nl = ValueList(null);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RPRAN_OP);
          {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

  final public Node MethodCallOrMemberAssignment(Node id) throws ParseException {
                                            Token t; Node id2; NodeList nl;
    t = jj_consume_token(DOT_OP);
    id2 = Identifier(false,false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT_OP:
                 id=getMember(t,Operation.GETATTR, id,id2);
      id = MethodCallOrMemberAssignment(id);
      break;
    case ASSIGN_OP:
      id = Assignment(id,id2);
      break;
    case LPRAN_OP:
                 id=getMember(t,Operation.GETATTR, id,id2);
      nl = ParamList();
                 id = new Call(id,nl);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPRAN_OP:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_4;
        }
        nl = ParamList();
                                 id=new Call(id,nl);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT_OP:
        id = GetMemberOrMethodCall(id);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public Node GetMemberOrMethodCall(Node id) throws ParseException {
                                      Token dot;  NodeList nl; Node gttr, id2;
    dot = jj_consume_token(DOT_OP);
    id2 = Identifier(false,false);
         gttr= getMember(dot,Operation.GETATTR,id,id2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPRAN_OP:
    case DOT_OP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPRAN_OP:
        nl = ParamList();
                  gttr= new Call(gttr,nl);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPRAN_OP:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_5;
          }
          nl = ParamList();
                                 gttr=new Call(gttr,nl);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT_OP:
          gttr = GetMemberOrMethodCall(gttr);
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        break;
      case DOT_OP:
        gttr = GetMemberOrMethodCall(gttr);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
          {if (true) return gttr;}
    throw new Error("Missing return statement in function");
  }

  final public Node Expression() throws ParseException {
                   Token t; Node e,e2;
    e = LogicOr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(AND);
      e2 = LogicOr();
                  e=new Call(t,Operation.AND,e,e2);
    }
         {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Node LogicOr() throws ParseException {
                Token t; Node e,e2;
    e = LogicEq();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(OR);
      e2 = LogicEq();
                 e=new Call(t,Operation.OR,e,e2);
    }
         {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Node LogicEq() throws ParseException {
                Token t; Node e,e2;
    e = LogicDiff();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ_OP:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(EQ_OP);
      e2 = LogicDiff();
                  e=new Call(t,Operation.EQ,e,e2);
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Node LogicDiff() throws ParseException {
                  Token t; Node e,e2;
    e = LogicRel();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIF_OP:
      t = jj_consume_token(DIF_OP);
      e2 = LogicRel();
                  e= new Call(t,Operation.NE,e,e2);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Node LogicRel() throws ParseException {
                 Pair p; Node e,e2;
    e = ArithAdd();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT_OP:
    case GE_OP:
    case LT_OP:
    case LE_OP:
      p = LogicRelOp();
      e2 = ArithAdd();
                  e= new Call(p.tok,p.op,e,e2);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Pair LogicRelOp() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT_OP:
      t = jj_consume_token(GT_OP);
                    {if (true) return new Pair(t,Operation.GT);}
      break;
    case GE_OP:
      t = jj_consume_token(GE_OP);
                    {if (true) return new Pair(t,Operation.GE);}
      break;
    case LE_OP:
      t = jj_consume_token(LE_OP);
                    {if (true) return new Pair(t,Operation.LE);}
      break;
    case LT_OP:
      t = jj_consume_token(LT_OP);
                    {if (true) return new Pair(t,Operation.LT);}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node ArithAdd() throws ParseException {
                 Pair p; Node e,e2;
    e = ArithMul();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS_OP:
      case PLUS_OP:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_9;
      }
      p = ArithAddOp();
      e2 = ArithMul();
                  e= new Call(p.tok,p.op,e,e2);
    }
         {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Pair ArithAddOp() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_OP:
      t = jj_consume_token(PLUS_OP);
                     {if (true) return new Pair(t, Operation.PLUS);}
      break;
    case MINUS_OP:
      t = jj_consume_token(MINUS_OP);
                     {if (true) return new Pair(t, Operation.MINUS);}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node ArithMul() throws ParseException {
                 Pair p; Node e,e2;
    e = ArithNegate();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT_OP:
      case DIV_OP:
      case MOD_OP:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      p = ArithMulOp();
      e2 = ArithNegate();
                  e= new Call(p.tok,p.op,e,e2);
    }
         {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Pair ArithMulOp() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT_OP:
      t = jj_consume_token(MULT_OP);
                      {if (true) return new Pair(t,Operation.MULT);}
      break;
    case DIV_OP:
      t = jj_consume_token(DIV_OP);
                      {if (true) return new Pair(t,Operation.DIV);}
      break;
    case MOD_OP:
      t = jj_consume_token(MOD_OP);
                      {if (true) return new Pair(t,Operation.MOD);}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node ArithNegate() throws ParseException {
                     Token t; Node e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPRAN_OP:
    case LBRAK_OP:
    case NOT:
    case None:
    case True:
    case False:
    case INTEGER:
    case FLOAT:
    case STRING:
    case BLOCKQUOTE:
    case IDENTIFIER:
      e = LogicNot();
                      {if (true) return e;}
      break;
    case MINUS_OP:
      t = jj_consume_token(MINUS_OP);
      e = LogicNot();
                                   {if (true) return new Call(t, Operation.NEG,e,null);}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node LogicNot() throws ParseException {
                   Token t; Node e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      e = Element();
                              {if (true) return new Call(t,Operation.NOT,e,null);}
      break;
    case LPRAN_OP:
    case LBRAK_OP:
    case None:
    case True:
    case False:
    case INTEGER:
    case FLOAT:
    case STRING:
    case BLOCKQUOTE:
    case IDENTIFIER:
      e = Element();
                     {if (true) return e;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Element() throws ParseException {
                 Node e;
    if (jj_2_10(2)) {
      e = FunctionCall();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT_OP:
        e = GetMemberOrMethodCall(e);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } else if (jj_2_11(2)) {
      e = PrimaryValue();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case None:
      case True:
      case False:
        e = Constant();
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Node PrimaryValue() throws ParseException {
                      Node id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case STRING:
    case BLOCKQUOTE:
      id = Literal();
      break;
    case IDENTIFIER:
      id = Identifier(true,false);
      break;
    case LPRAN_OP:
    case LBRAK_OP:
      id = ListTuple(false);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT_OP:
      id = GetMemberOrMethodCall(id);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
         {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public NodeList ValueList(NodeList nl) throws ParseException {
                                  Node n;
          if(nl==null) nl= new NodeList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPRAN_OP:
    case LBRAK_OP:
    case MINUS_OP:
    case NOT:
    case None:
    case True:
    case False:
    case INTEGER:
    case FLOAT:
    case STRING:
    case BLOCKQUOTE:
    case IDENTIFIER:
      n = Expression();
      break;
    case AT_OP:
      n = LambdaDef();
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          nl.addNode(n);
    if (jj_2_12(2)) {
      jj_consume_token(COMMA_OP);
      nl = ValueList(nl);
    } else {
      ;
    }
          {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

  final public NodeList IDList(NodeList nl) throws ParseException {
                               Node n;
          if(nl==null) nl= new NodeList();
    n = Identifier(false, false);
          nl.addNode(n);
    if (jj_2_13(2)) {
      jj_consume_token(COMMA_OP);
      nl = IDList(nl);
    } else {
      ;
    }
          {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

  final public Node ListTuple(boolean forceTuple) throws ParseException {
                                     Token t, comma=null; NodeList nl=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPRAN_OP:
      t = jj_consume_token(LPRAN_OP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPRAN_OP:
      case LBRAK_OP:
      case MINUS_OP:
      case AT_OP:
      case NOT:
      case None:
      case True:
      case False:
      case INTEGER:
      case FLOAT:
      case STRING:
      case BLOCKQUOTE:
      case IDENTIFIER:
        nl = ValueList(null);
        if (jj_2_14(2)) {
          comma = jj_consume_token(COMMA_OP);
        } else {
          ;
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jj_consume_token(RPRAN_OP);
                  if(!forceTuple && nl!=null && nl.size()==1 && comma==null) {if (true) return nl.getHead();}
      break;
    case LBRAK_OP:
      t = jj_consume_token(LBRAK_OP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPRAN_OP:
      case LBRAK_OP:
      case MINUS_OP:
      case AT_OP:
      case NOT:
      case None:
      case True:
      case False:
      case INTEGER:
      case FLOAT:
      case STRING:
      case BLOCKQUOTE:
      case IDENTIFIER:
        nl = ValueList(null);
        if (jj_2_15(2)) {
          jj_consume_token(COMMA_OP);
        } else {
          ;
        }
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jj_consume_token(RBRAK_OP);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                String s = t.kind==LPRAN_OP?"tuple":"list";
                {if (true) return new Call(new Identifier(t,s),nl);}
    throw new Error("Missing return statement in function");
  }

  final public Node Identifier(boolean checkST, boolean isAssign) throws ParseException {
                                                     Token t; Node n;
    t = jj_consume_token(IDENTIFIER);
                n=new Identifier(t,t.image);
                if(checkST){
                        if(isAssign){
                                if(!st.hasVariable(n,false))
                                        st.addVariable(n);
                                if(!st.testAssign(n))
                                        {if (true) throw getScopeError(t,"has type of "+st.getSymType(n)+" and cannot be assigned");}
                        } else {
                                if(!st.hasVariable(n,true))
                                        {if (true) throw getScopeError(t,"has not been defined yet");}
                                if(!st.testQuery(n))
                                        {if (true) throw getScopeError(t,"has not been initialized yet");}
                        }
                }
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node Literal() throws ParseException {
                  Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      tok = jj_consume_token(INTEGER);
                               {if (true) return new Literal(tok,BaseType.INTEGER);}
      break;
    case FLOAT:
      tok = jj_consume_token(FLOAT);
                               {if (true) return new Literal(tok,BaseType.FLOAT);}
      break;
    case STRING:
      tok = jj_consume_token(STRING);
                               {if (true) return new Literal(tok,BaseType.STRING);}
      break;
    case BLOCKQUOTE:
      tok = jj_consume_token(BLOCKQUOTE);
                               {if (true) return new Literal(tok,BaseType.STRING);}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Constant() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case None:
      t = jj_consume_token(None);
      break;
    case True:
      t = jj_consume_token(True);
      break;
    case False:
      t = jj_consume_token(False);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return new Identifier(t,t.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_3R_45() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_13()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(GLOBAL)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(MINUS_OP)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(BLOCKQUOTE)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(PASS)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(DOT_OP)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(DOT_OP)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(LPRAN_OP)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_13()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(LPRAN_OP)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(COMMA_OP)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(COMMA_OP)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(BLOCKQUOTE)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(AT_OP)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(ASSIGN_OP)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(LBRAK_OP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_scan_token(RBRAK_OP)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(DEF)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(LPRAN_OP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_scan_token(RPRAN_OP)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(COMMA_OP)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(COMMA_OP)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(ELIF)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_19()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[45];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000000,0x100,0x80000000,0x1500,0x400000,0x101500,0x40000,0x0,0x100,0x0,0x100,0x0,0x101500,0x100,0x100,0x101500,0x100,0x40000,0x240100,0x100,0x40000,0x40100,0x40100,0x0,0x0,0x8000000,0x10000000,0x7800000,0x7800000,0x3000,0x3000,0x1c000,0x1c000,0x1500,0x500,0x40000,0x0,0x500,0x40000,0x101500,0x101500,0x101500,0x500,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x901c65,0x0,0x9be200,0x0,0x9be200,0x0,0x101c20,0x800000,0x45,0x901c20,0x800000,0x9be200,0x0,0x0,0x9be200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9be200,0x9be200,0x0,0xe000,0x9b0000,0x0,0x9be200,0x9be200,0x9be200,0x0,0x1b0000,0xe000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[15];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
