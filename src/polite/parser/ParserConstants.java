/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package polite.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WS = 5;
  /** RegularExpression Id. */
  int LCURLY_OP = 6;
  /** RegularExpression Id. */
  int RCURLY_OP = 7;
  /** RegularExpression Id. */
  int LPRAN_OP = 8;
  /** RegularExpression Id. */
  int RPRAN_OP = 9;
  /** RegularExpression Id. */
  int LBRAK_OP = 10;
  /** RegularExpression Id. */
  int RBRAK_OP = 11;
  /** RegularExpression Id. */
  int MINUS_OP = 12;
  /** RegularExpression Id. */
  int PLUS_OP = 13;
  /** RegularExpression Id. */
  int MULT_OP = 14;
  /** RegularExpression Id. */
  int DIV_OP = 15;
  /** RegularExpression Id. */
  int MOD_OP = 16;
  /** RegularExpression Id. */
  int COLON_OP = 17;
  /** RegularExpression Id. */
  int DOT_OP = 18;
  /** RegularExpression Id. */
  int HBAR_OP = 19;
  /** RegularExpression Id. */
  int AT_OP = 20;
  /** RegularExpression Id. */
  int ASSIGN_OP = 21;
  /** RegularExpression Id. */
  int COMMA_OP = 22;
  /** RegularExpression Id. */
  int GT_OP = 23;
  /** RegularExpression Id. */
  int GE_OP = 24;
  /** RegularExpression Id. */
  int LT_OP = 25;
  /** RegularExpression Id. */
  int LE_OP = 26;
  /** RegularExpression Id. */
  int EQ_OP = 27;
  /** RegularExpression Id. */
  int DIF_OP = 28;
  /** RegularExpression Id. */
  int EOL = 29;
  /** RegularExpression Id. */
  int COMMENT = 30;
  /** RegularExpression Id. */
  int SEMICOLON = 31;
  /** RegularExpression Id. */
  int DEF = 32;
  /** RegularExpression Id. */
  int CLASS = 33;
  /** RegularExpression Id. */
  int IF = 34;
  /** RegularExpression Id. */
  int ELIF = 35;
  /** RegularExpression Id. */
  int ELSE = 36;
  /** RegularExpression Id. */
  int PASS = 37;
  /** RegularExpression Id. */
  int WHILE = 38;
  /** RegularExpression Id. */
  int AND = 39;
  /** RegularExpression Id. */
  int OR = 40;
  /** RegularExpression Id. */
  int NOT = 41;
  /** RegularExpression Id. */
  int PRINT = 42;
  /** RegularExpression Id. */
  int RETURN = 43;
  /** RegularExpression Id. */
  int GLOBAL = 44;
  /** RegularExpression Id. */
  int None = 45;
  /** RegularExpression Id. */
  int True = 46;
  /** RegularExpression Id. */
  int False = 47;
  /** RegularExpression Id. */
  int INTEGER = 48;
  /** RegularExpression Id. */
  int FLOAT = 49;
  /** RegularExpression Id. */
  int EXPONENT = 50;
  /** RegularExpression Id. */
  int STRING = 51;
  /** RegularExpression Id. */
  int BLOCKQUOTE = 52;
  /** RegularExpression Id. */
  int BLOCKSINGLEDELIM = 53;
  /** RegularExpression Id. */
  int BLOCKDOUBLEDELIM = 54;
  /** RegularExpression Id. */
  int IDENTIFIER = 55;
  /** RegularExpression Id. */
  int ERROR = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\\\\\r\\n\"",
    "\"\\\\\\\\n\\r\"",
    "\"\\\\\\n\"",
    "\"\\\\\\r\"",
    "<WS>",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\":\"",
    "\".\"",
    "\"|\"",
    "\"@\"",
    "\"=\"",
    "\",\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "<EOL>",
    "<COMMENT>",
    "\";\"",
    "\"def\"",
    "\"class\"",
    "\"if\"",
    "\"elif\"",
    "\"else\"",
    "\"pass\"",
    "\"while\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"print\"",
    "\"return\"",
    "\"global\"",
    "\"None\"",
    "\"True\"",
    "\"False\"",
    "<INTEGER>",
    "<FLOAT>",
    "<EXPONENT>",
    "<STRING>",
    "<BLOCKQUOTE>",
    "<BLOCKSINGLEDELIM>",
    "<BLOCKDOUBLEDELIM>",
    "<IDENTIFIER>",
    "<ERROR>",
  };

}
